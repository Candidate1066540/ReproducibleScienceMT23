install.packages("ggplot2")
install.packages("palmerpenguins")
install.packages("janitor")
install.packages("dplyr")
library(ggplot2)
library(palmerpenguins)
library(janitor)
library(dplyr)
# check the data is there:
head(penguins_raw)
# Now, make a correct but misleading plot.
ggplot(data=penguins_raw, aes(x=Flipper.Length, y = Body.Mass)) + geom_pont() )
# Now, make a correct but misleading plot.
ggplot(data=penguins_raw, aes(x=Flipper.Length, y = Body.Mass)) + geom_pont()
# Now, make a correct but misleading plot.
ggplot(data=penguins_raw, aes(x=Flipper.Length, y = Body.Mass)) + geom_pont()
ggplot(data=penguins_raw, aes(x=Flipper.Length, y = Body.Mass)) +
geom_pont()
ggplot(data=penguins_raw, aes(x=Flipper.Length, y = Body.Mass)) +
geom_point()
ggplot(data=penguins_raw, aes(x=Flipper Length, y = Body Mass)) +
ggplot(data=penguins_raw, aes(x=Bill.Length, y = Bill.Depth)) +
geom_bar()
# check the data is there:
head(penguins_raw)
ggplot(data=penguins_raw, aes(x= Flipper Length (mm), y = Body Mass (g))) +
# check the data is there:
head(penguins_raw)
# check the data is there:
head(penguins)
ggplot(data=penguins_raw, aes(x= flipper_length_mm, y = body_mass_g) +
geom_point()
ggplot(data=penguins_raw, aes(x= flipper_length_mm, y = body_mass_g) +
ggplot(data=penguins, aes(x= flipper_length_mm, y = body_mass_g) +
geom_point()
ggplot(data=penguins, aes(x= flipper_length_mm, y = body_mass_g)) +
ggplot(data=penguins, aes(x= flipper_length_mm, y = body_mass_g))
ggplot(data=penguins, aes(x= flipper_length_mm, y = body_mass_g)) +
geom_point()
# There is no need to provide the code for your bad figure, just use echo=FALSE so the code is hidden. Make sure your figure is visible after you knit it.
# packages installed via interface.
# load the packages in via library() function:
library(ggplot2)
library(palmerpenguins)
library(janitor)
library(dplyr)
# check the data is there:
head(penguins)
# Now, make a correct but misleading plot.
ggplot(data=penguins, aes(x= flipper_length_mm, y = body_mass_g)) +
geom_point()
```{r setup, include=FALSE}
ggplot(data=penguins, aes(x= flipper_length_mm, y = body_mass_g)) +
geom_point()
library(ggplot2)
library(palmerpenguins)
library(janitor)
library(dplyr)
# check the data is there:
head(penguins)
# Now, make a correct but misleading plot.
ggplot(data=penguins, aes(x= flipper_length_mm, y = body_mass_g)) +
geom_point()
head(penguins_raw) # enables visual inspection of the RAW data. Will need to clean and process later on for better use.
# clean the data. Ensure it is saved to the data folder in the R project, which is called AssignmentDataReproSci in this instance.
penguins_raw
write.csv(penguins_raw, "AssignmentDataReproSci/penguins_raw.csv") # NOTE: need to ensure "FolderName/TheRawData" is correct. Don't put "data/rawdata" if the folder name is NOT data.
# There is no need to provide the code for your bad figure, just use echo=FALSE so the code is hidden. Make sure your figure is visible after you knit it.
# packages installed via interface.
# load the packages in via library() function:
library(ggplot2)
library(palmerpenguins)
library(janitor)
library(dplyr)
# check the data is there:
head(penguins)
# Now, make a correct but misleading plot.
ggplot(data=penguins, aes(x= flipper_length_mm, y = body_mass_g)) +
geom_point()
#{r setup, include=FALSE}
#knitr::opts_chunk$set(echo = TRUE)
Penguin_model2 <- add_column(Body.Mass..g. ,predicted = predict(Penguin_model1)  )
remove_NA <- function(penguins_clean) {
penguins_data %>%
na.omit()
}
ggplot(data=penguins_clean, aes(x=Body.Mass..g., y=Culmen.Depth..mm.)) +
geom_point(colour = "blue")
# Make sure your code prints.
# VITAL: if unsure, be sure  the Rmd being accessed is " ReproducibleScienceMT23HomeworkDec2023.Rmd".
install.packages(c("ggplot2", "palmerpenguins", "janitor", "dplyr")) # Installs all packages in one line.
library(ggplot2)
library(palmerpenguins)
library(janitor)
library(dplyr) # loads the required packages for working with the penguin data.
head(penguins_raw) # enables visual inspection of the RAW data. Will need to clean and process later on for better use.
install.packages(c("ggplot2", "palmerpenguins", "janitor", "dplyr"))
# clean the data. Ensure it is saved to the data folder in the R project, which is called AssignmentDataReproSci in this instance.
penguins_raw
write.csv(penguins_raw, "AssignmentDataReproSci/penguins_raw.csv") # NOTE: need to ensure "FolderName/TheRawData" is correct. Don't put "data/rawdata" if the folder name is NOT data. Applies to name of data file too.
# Make sure your code prints.
# Make sure that your code is made to address the hypotheses being tested. Is vital for so much good science.
# Refer to the bad exploratory plot and code for basics if required.
# Clean the data, now it is saved in the folder AssignmentDataReproSci.
penguins_raw <- read.csv("AssignmentDataReproSci/penguins_raw.csv") # ENSURE all typed correctly.
names(penguins_raw)# to check the column names.
# Create a new variable called penguins_clean, and remove two columns will be removed.The result is cleaned data.
penguins_clean <- select(penguins_raw,-starts_with("Delta"))
penguins_clean <- select(penguins_clean,-Comments)
# Check the column names in the new data frame:
names(penguins_clean) # the Delta is gone.
# using  functions to clean and further process the data is advisable.
remove_NA <- function(penguins_clean) {
penguins_data %>%
na.omit()
}
# Now it has been cleaned (in line with the lesson), adjust if needed to suit testing of the hypothesis.
ggplot(data=penguins_clean, aes(x=Body.Mass..g., y=Culmen.Depth..mm.)) +
geom_point(colour = "blue")  # produces an exploratory scatter plot for the explanatory and response varaibles with respect to the three penguin species.
ggplot(Penguin_model1, aes(x = Body.Mass..g. , y = Culmen.Depth..mm.)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x="Body mass of penguin (g)", y = "Culmen Depth of penguin (mm)") +
ggtitle("Body mass and culmen depth for the Palmer Penguins")  #found appropriate way to add a title here (5)
#Running a linear regression model, as learned earlier in the MBiol FHS course (3).
Penguin_model1 <- lm(Culmen.Depth..mm. ~ Body.Mass..g. , penguins_clean, na.rm=TRUE)
Penguin_model1
summary(Penguin_model1)# allows you to view the output of the linear regression model. This output applies to the overall penguin population, not individual species.
# alternative way can be found here (4)
ggplot(Penguin_model1, aes(x = Body.Mass..g. , y = Culmen.Depth..mm.)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x="Body mass of penguin (g)", y = "Culmen Depth of penguin (mm)") +
ggtitle("Body mass and culmen depth for the Palmer Penguins")  #found appropriate way to add a title here (5)
# this plots the model on a labelled and titled plot. Having clear and concise but informative titles and labels is important to effectively communicate the data.
# the grey area around the linear regression line represents the 95% confidence interval (3).
install.packages("tinytex")
library(tinytex)
library(ggplot2)
library(palmerpenguins)
library(janitor)
library(dplyr)
# check the data is there:
head(penguins)
# Now, make a correct but misleading plot.
ggplot(data=penguins, aes(x= flipper_length_mm, y = body_mass_g)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE)
# Make sure your code prints.
# VITAL: if unsure, be sure  the Rmd being accessed is " ReproducibleScienceMT23HomeworkDec2023.Rmd".
install.packages(c("ggplot2", "palmerpenguins", "janitor", "dplyr")) # Installs all packages in one line.
library(ggplot2)
library(palmerpenguins)
library(janitor)
library(dplyr) # loads the required packages for working with the penguin data.
head(penguins_raw) # enables visual inspection of the RAW data. Will need to clean and process later on for better use.
knitr::opts_chunk$set(echo = TRUE)
install.packages(c("ggplot2", "palmerpenguins", "janitor", "dplyr"))
# clean the data. Ensure it is saved to the data folder in the R project, which is called AssignmentDataReproSci in this instance.
penguins_raw
write.csv(penguins_raw, "AssignmentDataReproSci/penguins_raw.csv") # NOTE: need to ensure "FolderName/TheRawData" is correct. Don't put "data/rawdata" if the folder name is NOT data. Applies to name of data file too.
knitr::opts_chunk$set(echo = TRUE)
# Make sure your code prints.
# Make sure that your code is made to address the hypotheses being tested. Is vital for so much good science.
# Refer to the bad exploratory plot and code for basics if required.
# Clean the data, now it is saved in the folder AssignmentDataReproSci.
penguins_raw <- read.csv("AssignmentDataReproSci/penguins_raw.csv") # ENSURE all typed correctly.
names(penguins_raw)# to check the column names.
# Create a new variable called penguins_clean, and remove two columns will be removed.The result is cleaned data.
penguins_clean <- select(penguins_raw,-starts_with("Delta"))
penguins_clean <- select(penguins_clean,-Comments)
# Check the column names in the new data frame:
names(penguins_clean) # the Delta is gone.
# using  functions to clean and further process the data is advisable.
remove_NA <- function(penguins_clean) {
penguins_data %>%
na.omit()
}
# Now it has been cleaned (in line with the lesson), adjust if needed to suit testing of the hypothesis.
ggplot(data=penguins_clean, aes(x=Body.Mass..g., y=Culmen.Depth..mm.)) +
geom_point(colour = "blue")  # produces an exploratory scatter plot for the explanatory and response varaibles with respect to the three penguin species.
knitr::opts_chunk$set(echo = TRUE)
#Running a linear regression model, as learned earlier in the MBiol FHS course (3).
Penguin_model1 <- lm(Culmen.Depth..mm. ~ Body.Mass..g. , penguins_clean, na.rm=TRUE)
Penguin_model1
summary(Penguin_model1)# allows you to view the output of the linear regression model. This output applies to the overall penguin population, not individual species.
# alternative way can be found here (4)
knitr::opts_chunk$set(echo = TRUE)
ggplot(Penguin_model1, aes(x = Body.Mass..g. , y = Culmen.Depth..mm.)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x="Body mass of penguin (g)", y = "Culmen Depth of penguin (mm)") +
ggtitle("Body mass and culmen depth for the Palmer Penguins")  #found appropriate way to add a title here (5)
# this plots the model on a labelled and titled plot. Having clear and concise but informative titles and labels is important to effectively communicate the data.
# the grey area around the linear regression line represents the 95% confidence interval (3).
knitr::opts_chunk$set(echo = TRUE)
# There is no need to provide the code for your bad figure, just use echo=FALSE so the code is hidden. Make sure your figure is visible after you knit it.
#install.packages("tinytex")
#library(tinytex) # to allow kniting to a PDF.
# packages installed via interface.
# load the packages in via library() function:
library(ggplot2)
library(palmerpenguins)
library(janitor)
library(dplyr)
# check the data is there:
head(penguins)
# Now, make a correct but misleading plot.
ggplot(data=penguins, aes(x= flipper_length_mm, y = body_mass_g)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE)
# Make sure your code prints.
# VITAL: if unsure, be sure  the Rmd being accessed is " ReproducibleScienceMT23HomeworkDec2023.Rmd".
install.packages(c("ggplot2", "palmerpenguins", "janitor", "dplyr")) # Installs all packages in one line.
library(ggplot2)
library(palmerpenguins)
library(janitor)
library(dplyr) # loads the required packages for working with the penguin data.
head(penguins_raw) # enables visual inspection of the RAW data. Will need to clean and process later on for better use.
knitr::opts_chunk$set(echo = TRUE)
# clean the data. Ensure it is saved to the data folder in the R project, which is called AssignmentDataReproSci in this instance.
penguins_raw
write.csv(penguins_raw, "AssignmentDataReproSci/penguins_raw.csv") # NOTE: need to ensure "FolderName/TheRawData" is correct. Don't put "data/rawdata" if the folder name is NOT data. Applies to name of data file too.
knitr::opts_chunk$set(echo = TRUE)
# Make sure your code prints.
# Make sure that your code is made to address the hypotheses being tested. Is vital for so much good science.
# Refer to the bad exploratory plot and code for basics if required.
# Clean the data, now it is saved in the folder AssignmentDataReproSci.
penguins_raw <- read.csv("AssignmentDataReproSci/penguins_raw.csv") # ENSURE all typed correctly.
names(penguins_raw)# to check the column names.
# Create a new variable called penguins_clean, and remove two columns will be removed.The result is cleaned data.
penguins_clean <- select(penguins_raw,-starts_with("Delta"))
penguins_clean <- select(penguins_clean,-Comments)
# Check the column names in the new data frame:
names(penguins_clean) # the Delta is gone.
# using  functions to clean and further process the data is advisable.
remove_NA <- function(penguins_clean) {
penguins_data %>%
na.omit()
}
# Now it has been cleaned (in line with the lesson), adjust if needed to suit testing of the hypothesis.
ggplot(data=penguins_clean, aes(x=Body.Mass..g., y=Culmen.Depth..mm.)) +
geom_point(colour = "blue")  # produces an exploratory scatter plot for the explanatory and response varaibles with respect to the three penguin species.
knitr::opts_chunk$set(echo = TRUE)
#Running a linear regression model, as learned earlier in the MBiol FHS course (3).
Penguin_model1 <- lm(Culmen.Depth..mm. ~ Body.Mass..g. , penguins_clean, na.rm=TRUE)
Penguin_model1
summary(Penguin_model1)# allows you to view the output of the linear regression model. This output applies to the overall penguin population, not individual species.
# alternative way can be found here (4)
knitr::opts_chunk$set(echo = TRUE)
ggplot(Penguin_model1, aes(x = Body.Mass..g. , y = Culmen.Depth..mm.)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x="Body mass of penguin (g)", y = "Culmen Depth of penguin (mm)") +
ggtitle("Body mass and culmen depth for the Palmer Penguins")  #found appropriate way to add a title here (5)
# this plots the model on a labelled and titled plot. Having clear and concise but informative titles and labels is important to effectively communicate the data.
# the grey area around the linear regression line represents the 95% confidence interval (3).
knitr::opts_chunk$set(echo = TRUE)
install.packages(c("ggplot2", "palmerpenguins", "janitor", "dplyr"))
ggplot(Penguin_model1, aes(x = Body.Mass..g. , y = Culmen.Depth..mm.)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x="Body mass of penguin (g)", y = "Culmen Depth of penguin (mm)") +
ggtitle("Body mass and culmen depth for the Palmer Penguins")  #found appropriate way to add a title here (5)
# this plots the model on a labelled and titled plot. Having clear and concise but informative titles and labels is important to effectively communicate the data.
# the grey area around the linear regression line represents the 95% confidence interval (3).
#knitr::opts_chunk$set(echo = TRUE)
# There is no need to provide the code for your bad figure, just use echo=FALSE so the code is hidden. Make sure your figure is visible after you knit it.
#install.packages("tinytex")
#library(tinytex) # to allow kniting to a PDF.
# packages installed via interface.
# load the packages in via library() function:
library(ggplot2)
library(palmerpenguins)
library(janitor)
library(dplyr)
# check the data is there:
head(penguins)
# Now, make a correct but misleading plot.
ggplot(data=penguins, aes(x= flipper_length_mm, y = body_mass_g)) +
geom_point()
